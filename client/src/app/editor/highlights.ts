export enum KeywordType {
    AccessModifier = 'access-modifier',
    NonAccessModifier = 'non-access-modifier',
    Primitive = 'primitive',
    PrimitiveWrapper = 'primitive-wrapper',
    Literal = 'literal',
    Other = 'other',
    Structural = 'structural'
}

export const hightlights: object = {
    java: {
        Integer: KeywordType.PrimitiveWrapper,
        Double: KeywordType.PrimitiveWrapper,
        String: KeywordType.PrimitiveWrapper,
        Long: KeywordType.PrimitiveWrapper,
        Short: KeywordType.PrimitiveWrapper,
        Float: KeywordType.PrimitiveWrapper,
        Number: KeywordType.PrimitiveWrapper,
        Byte: KeywordType.PrimitiveWrapper,
        public: KeywordType.AccessModifier,
        protected: KeywordType.AccessModifier,
        private: KeywordType.AccessModifier,
        true: KeywordType.Literal,
        null: KeywordType.Literal,
        false: KeywordType.Literal,
        int: KeywordType.Primitive,
        float: KeywordType.Primitive,
        double: KeywordType.Primitive,
        char: KeywordType.Primitive,
        byte: KeywordType.Primitive,
        boolean: KeywordType.Primitive,
        long: KeywordType.Primitive,
        short: KeywordType.Primitive,
        final: KeywordType.NonAccessModifier,
        abstract: KeywordType.NonAccessModifier,
        static: KeywordType.NonAccessModifier,
        synchronized: KeywordType.NonAccessModifier,
        volatile: KeywordType.NonAccessModifier,
        void: KeywordType.Other,
        class: KeywordType.Other,
        assert: KeywordType.Other,
        break: KeywordType.Other,
        case: KeywordType.Other,
        catch: KeywordType.Other,
        const: KeywordType.Other,
        continue: KeywordType.Other,
        default: KeywordType.Other,
        do: KeywordType.Other,
        else: KeywordType.Other,
        enum: KeywordType.Other,
        extends: KeywordType.Other,
        finally: KeywordType.Other,
        for: KeywordType.Other,
        goto: KeywordType.Other,
        if: KeywordType.Other,
        implements: KeywordType.Other,
        import: KeywordType.Other,
        instanceof: KeywordType.Other,
        interface: KeywordType.Other,
        native: KeywordType.Other,
        new: KeywordType.Other,
        package: KeywordType.Other,
        return: KeywordType.Other,
        super: KeywordType.Other,
        switch: KeywordType.Other,
        this: KeywordType.Other,
        throw: KeywordType.Other,
        throws: KeywordType.Other,
        transient: KeywordType.Other,
        try: KeywordType.Other,
        while: KeywordType.Other,
        ';': KeywordType.Structural,
        '{': KeywordType.Structural,
        '}': KeywordType.Structural,
        '(': KeywordType.Structural,
        ')': KeywordType.Structural,
        '[': KeywordType.Structural,
        ']': KeywordType.Structural,
        ':': KeywordType.Structural
    }
};
